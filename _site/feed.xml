<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luke Fender</title>
    <description>A blog about everything and nothing
</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Oct 2014 18:36:57 -0400</pubDate>
    <lastBuildDate>Sun, 05 Oct 2014 18:36:57 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>modularizing gulp tasks</title>
        <description>&lt;p&gt;Gulp is nodes popular stream based building system, and has been an absolute pleasure to work with. However, as I move from project to project, I often find myself relying on the same tasks.&lt;/p&gt;

&lt;p&gt;Whether its minification, or a set of release tasks, the game of copy and paste can be burdensome. No point in reinventing the wheel for a new project, right?&lt;/p&gt;

&lt;p&gt;Thats when it struck me. Why not modularize the gulp tasks themselves? That way, I can just pull them into my current projects gulpfile.&lt;/p&gt;

&lt;h2 id=&quot;register-gulp-tasks-via-moduleexport&quot;&gt;register gulp tasks via module.export&lt;/h2&gt;

&lt;p&gt;Node makes it relatively simple to require and scope methods to a single module.&lt;/p&gt;

&lt;p&gt;With gulp specifically, it is relatively easy to import tasks from another file. You do this simply by passing a reference to your initial &lt;code&gt;gulp&lt;/code&gt; object.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// add this to your gulpfile.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// pass along gulp reference to import tasks onto your gulp object&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Node, by default, will look in our &lt;code&gt;node_modules&lt;/code&gt; directory for a package with the name of gulp-foo&lt;/p&gt;

&lt;p&gt;Inside of our module, we may expect to find something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ./node_modules/gulp-foo/index.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By running &lt;code&gt;gulp -T&lt;/code&gt; will see that &lt;code&gt;foo&lt;/code&gt; is now one of our registered tasks.&lt;/p&gt;

&lt;p&gt;We can see that by only have 2 lines in our gulpfile, we’ve opened the door to task modularity and reuse.&lt;/p&gt;

&lt;h2 id=&quot;strive-for-modularity-with-gulp&quot;&gt;strive for modularity with gulp&lt;/h2&gt;
&lt;p&gt;I am sick to death of writing the same coffee in coffee out task from project to project. It can prove to be pretty monotomnous.&lt;/p&gt;

&lt;p&gt;We all have different ways of doing things in our projects, especially with gulp.&lt;/p&gt;

&lt;p&gt;Some of us may keep our coffee in a separate folder than our javascripts, some of us may not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But if you think you’ve written a pretty good gulp task, and your proud of it, why not register it on npm? share it with the world&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;that way the rest of us can stop wasting time putting together our own gulp tasks, we can standardize our projects, and focus on what we love most.&lt;/p&gt;

&lt;h2 id=&quot;gulp-release-tasks-a-real-world-example&quot;&gt;gulp release tasks, a real world example&lt;/h2&gt;

&lt;p&gt;I’ve applied this concept in a project called &lt;a href=&quot;https://github.com/lfender6445/gulp-release-tasks&quot;&gt;gulp release tasks&lt;/a&gt; which I hope proves useful to gulp, npm, and bower lovers alike.&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://localhost:4000//modularizing-gulp-tasks/</link>
        <guid isPermaLink="true">http://localhost:4000//modularizing-gulp-tasks/</guid>
        
        <category>gulp</category>
        
        <category>javascript</category>
        
        
      </item>
    
      <item>
        <title>10 Must Have Chrome Extensions for Developers 2014</title>
        <description>&lt;p&gt;A DRY work flow is crucial in development. In the time I’ve been programming, I’ve collected a few chrome extensions that are essential to my development work flow and that make both my professional and personal life in the browser much easier.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;livereload&quot;&gt;LiveReload&lt;/h2&gt;

    &lt;p&gt;LiveReload allows you to detect changes on your file system and reloads the pages to reflect current changes. It receives messages from a Guard server running in your project root and is highly configurable, using regular expressions to reload the browser when files of your choice have changed. The downside is you have to configure a guard server in tandem with the plugin, but it is BY FAR the most flexible solution I’ve found.&lt;/p&gt;

    &lt;p&gt;All thats left is to enable LiveReload for your current page and start the Guard server!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei&quot; class=&quot;grn&quot;&gt;Get LiveReload&lt;/a&gt;
&lt;a href=&quot;https://github.com/guard/guard-livereload&quot; class=&quot;grn&quot;&gt;Get Guard LiveReload&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;An alternative to LiveReload for simpler projects is &lt;a href=&quot;https://chrome.google.com/webstore/detail/tincr/lfjbhpnjiajjgnjganiaggebdhhpnbih&quot;&gt;Tincr&lt;/a&gt;, which creates a new panel in the chrome dev tools to toggle reloading against a specific page or file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;vimium&quot;&gt;Vimium&lt;/h2&gt;
    &lt;p&gt;Users of the vim text editor will love this extension. Time is everything. The less time I have to spend using the mouse the better. I discovered Vimium a few days ago and it is nothing short of amazing, adding sensible vim like bindings to any web page. This is especially useful for repetitive tasks, navigation, and tab management.&lt;/p&gt;

    &lt;p&gt;Here are a few of my favorite bindings:&lt;/p&gt;

    &lt;blockquote&gt;

      &lt;pre&gt;&lt;code&gt;gg      scroll to top of the page
G       scroll to bottom of the page
f       open a link in the current tab
F       open a link in a new tab
r       reload
gs      view source
yy      copy the current url to the clipboard
yf      copy a link url to the clipboard
o       Open URL, bookmark, or history entry
O       Open URL, bookmark, history entry in a new tab
b       Open bookmark
B       Open bookmark in a new tab
&lt;/code&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;I’ve only scratched the surface - check out the source code for more information&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb&quot; class=&quot;grn&quot;&gt;Get Vimium Chrome Extension&lt;/a&gt;
&lt;a href=&quot;https://github.com/philc/vimium/&quot; class=&quot;grn&quot;&gt;Vimium Documentation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;postman---rest-client&quot;&gt;Postman - REST Client&lt;/h2&gt;

    &lt;p&gt;The web is and has been moving to a service centric model for a while now. It’s hard to be a developer these days without relying on some XML or JSON based rest API at least once. Postman makes it easy to craft and record API calls to the services your rely on the most.&lt;/p&gt;

    &lt;p&gt;You can separate these calls in their own unique collections, split url query params in a visually sensible way, and execute everything from PUT, to PATCH, to DELETE.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en&quot; class=&quot;grn&quot;&gt;Get Postman Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;jsonview&quot;&gt;JSONView&lt;/h2&gt;

    &lt;p&gt;Chrome, for whatver reason, doesn’t render JSON in a sensible way.&lt;/p&gt;

    &lt;p&gt;JSONView supports syntax highlighting and the collapsing and nesting of JSON responses.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en&quot; class=&quot;grn&quot;&gt;Get JSONView Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;hacker-vision&quot;&gt;Hacker Vision&lt;/h2&gt;
    &lt;p&gt;The web is traditionally built with black text on a stark white background. As a developer who spends a lot of time in text editors and terminal, it can be straining to make the visual context switch between these contrasts.&lt;/p&gt;

    &lt;p&gt;HackerVision is an extension that injects CSS into your current page, using a formula to invert colors and apply terminal like shading to the body and text, making pages much easier to read, thus reducing eye strain.  Another plugin, &lt;a href=&quot;https://chrome.google.com/webstore/detail/deluminate/iebboopaeangfpceklajfohhbpkkfiaa?hl=en-US&quot;&gt;deuluminate&lt;/a&gt; works in a similar way.&lt;/p&gt;

    &lt;p&gt;The plugin binds to &lt;code&gt;cmd + shift + f11&lt;/code&gt;, allowing you to easily toggle hacker vision on and off. You also have the ability to disable hacker vision for specific pages.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/hacker-vision/fommidcneendjonelhhhkmoekeicedej?hl=en-US&quot; class=&quot;grn&quot;&gt;Get Hacker Vision Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;devtools-theme-zero-dark-matrix&quot;&gt;DevTools Theme: Zero Dark Matrix&lt;/h2&gt;
    &lt;p&gt;If you spend a lot of time in the chrome web inspector, then this plugin is for you.&lt;/p&gt;

    &lt;p&gt;Based on a molokai like colorscheme, this plugin restyles your dev console so it is more in line with a traditional dev themed text editor that will feel very familiar to users of Vim or Sublime. Because the web inspector itself is just HTML and CSS, this re-skin attempts to re-craft the console for ease of use and access, where panels have logical placement and are easily resized.&lt;/p&gt;

    &lt;p&gt;There are some nice CSS3 animations that come with the plugin as well, giving an accordion and drawer like feel to chrome dev tools.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/devtools-theme-zero-dark/bomhdjeadceaggdgfoefmpeafkjhegbo?hl=en-US&quot; class=&quot;grn&quot;&gt;Get Zero Dark Matrix Chrome DevTools Theme&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;workflowy&quot;&gt;Workflowy&lt;/h2&gt;

    &lt;p&gt;TODO list apps are everywhere, but this is by far my favorite. Workflowy makes making lists fun again (make lists not war!!!) - the free version even syncs up with my email. Its a simple app equipped with powerful key bindings and is something I use both in personal and professional life.&lt;/p&gt;

    &lt;p&gt;For what its worth, I prefer the &lt;a href=&quot;https://workflowy.com/&quot;&gt;web client&lt;/a&gt; to the chrome extension, where I always have it open as a pinned tab.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/workflowy/koegeopamaoljbmhnfjbclbocehhgmkm?hl=en-US&quot; class=&quot;grn&quot;&gt;Get Workflowy Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;appspector&quot;&gt;Appspector&lt;/h2&gt;
    &lt;p&gt;This plugin allows you to detect web applications and javascript libraries that are running on a specific website. I keep this one installed
mostly to gauge what libraries my favorite sites are using - it also does a good job of detecting blogging platforms or frameworks like WordPress and Joomla.
Appspector adds a subtle icon in the address bar of the page you are viewing to indicate detected libraries.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/appspector/homgcnaoacgigpkkljjjekpignblkeae?hl=en&quot; class=&quot;grn&quot;&gt;Get Appspector Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;tab-pinner&quot;&gt;Tab Pinner&lt;/h2&gt;
    &lt;p&gt;Chrome treats pinned tabs differently - if chrome is ever shut down or crashes, pinned tabs are reopened by default.&lt;/p&gt;

    &lt;p&gt;I find Chromes ‘pin tab’ feature to be quite useful. Unfortunately, chrome is not equipped with a key binding that allows me to easily pin tabs. Tab pinner allows the user to easily pin and unpin tabs with &lt;code&gt;cmd + shift + x&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/tab-pinner-keyboard-short/mbcjcnomlakhkechnbhmfjhnnllpbmlh?hl=en&quot; class=&quot;grn&quot;&gt;Get Tab Pinner Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;ruby-omniref&quot;&gt;Ruby Omniref&lt;/h2&gt;
    &lt;p&gt;As a ruby developer, I find this tool to be extremely useful:&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;“The Omniref addon integrates Ruby documentation search results from Omniref.com into your Google search results, and automatically annotates Ruby source listings on Github with links to documentation searches on Omniref.”&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;It would be nice to see more extensions like this geared towards other languages and libraries.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/omniref/jgkfbhdcoimcmlnebfnggkegaincacgj?hl=en&quot; class=&quot;grn&quot;&gt;Get Ruby Omniref Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-extras&quot;&gt;Some Extras&lt;/h2&gt;

&lt;p&gt;This was supposed to be a list of 10 extensions but what the hell. Lets make it 12!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;lastpass&quot;&gt;LastPass&lt;/h3&gt;

    &lt;p&gt;LastPass is amazing. With lastpass I can automate logins across all of my devices and customize each page or entry under a single master password, saving me the headache of having to remember every unique password and login combination I possess for my favorite sites.&lt;/p&gt;

    &lt;p&gt;I could not live without this plugin.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd?hl=en-US&quot; class=&quot;grn&quot;&gt;Get LastPass Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;check-my-links&quot;&gt;Check My Links&lt;/h3&gt;

    &lt;p&gt;This plugin is more suited towards bloggers, so I hesitate putting it here - either way, it allows you to verify that all of the links on your page or post are working as intended. Useful for drafting and publishing content or documentation with outbound links.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/check-my-links/ojkcdipcgfaekbeaelaapakgnjflfglf&quot; class=&quot;grn&quot;&gt;Get Check my Links Chrome Extension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 21 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://localhost:4000//10-must-have-chrome-extensions-for-developers-2014/</link>
        <guid isPermaLink="true">http://localhost:4000//10-must-have-chrome-extensions-for-developers-2014/</guid>
        
        <category>chrome</category>
        
        <category>development</category>
        
        <category>productivity</category>
        
        
        <category>development</category>
        
      </item>
    
  </channel>
</rss>
